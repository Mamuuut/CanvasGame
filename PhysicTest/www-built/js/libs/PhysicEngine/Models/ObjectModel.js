define(["PhysicEngine/Models/Vector2D","PhysicEngine/Models/Rect","PhysicEngine/Models/Contacts","PhysicEngine/Events/EventTargetMixin","PhysicEngine/Events/PhysicEvents","PhysicEngine/Helpers/CollisionHelper","PhysicEngine/Controller/PhysicController"],function(e,t,n,r,i,s,o){var u=function(r,i,s,a){function c(e){e.x=Math.max(-u.MAX_VELOCITY.x,Math.min(u.MAX_VELOCITY.x,e.x)),e.y=Math.max(-u.MAX_VELOCITY.y,Math.min(u.MAX_VELOCITY.y,e.y))}function h(e){return-1!=l.objectFriction?l.objectFriction:l.contacts.hasContact(e)?u.CONTACT_FRICTION[e]:u.AIR_FRICTION}t.call(this,r,i,s,a);var f=null,l=this;this.nextPosition=new e(r,i),this.velocity=new e,this.mass=1,this.contacts=new n,this.objectFriction=-1,this.collideBits=0,this.parentQuads=[],this.updateTimePosition=function(e){c(this.velocity),this.position=this.getTimePosition(e)},this.updateTimeNextPosition=function(e){c(this.velocity),this.nextPosition=this.getTimePosition(1-e)},this.updateForces=function(){if(!this.hasMaxMass()){var t,n=this.velocity;for(var r=0,i=f.length;t=f[r],r<i;r++)n.x+=t.x,n.y+=t.y;n.x*=h(e.Y_AXIS),n.y*=h(e.X_AXIS)}},this.resetForces=function(){f=new Array,this.addForce(o.GRAVITY)},this.addForce=function(e){f.push(e)},this.resetForces()};return extend(u,t),u.MAX_VELOCITY=new e(40,40),u.CONTACT_FRICTION=new e(.5,.9),u.AIR_FRICTION=.95,u.prototype.updatePosition=function(){this.position.x=this.nextPosition.x,this.position.y=this.nextPosition.y},u.prototype.checkObjectIntersections=function(e){var t,n=s.checkOverriding,r=this.position,o=this.size;for(var u=0,a=e.length;t=e[u],u<a;u++)this!=t&&n(r,o,t.position,t.size)&&this.dispatchEvent(i.INTERSECT,{object:t})},u.prototype.collidesWith=function(e){var t=this.collideBits&e.collideBits;return 0!=t},u.prototype.clearContacts=function(){this.contacts.clear()},u.prototype.getContactObjects=function(e,t){var n=new Array;n.push(this);var r=this.contacts.getObjects(e,t);if(0!=r.length){var i;for(var s=0,o=r.length;i=r[s],s<o;s++)n=n.concat(i.getContactObjects(e,t))}return n},u.prototype.getTimePosition=function(t){return new e(Math.round(this.position.x+t*this.velocity.x),Math.round(this.position.y+t*this.velocity.y))},u.prototype.hasMaxMass=function(){return Number.MAX_VALUE==this.mass},augment(u,r),u})